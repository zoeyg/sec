window.data = {
  "report": {
      "notifier": "Laravel Client",
      "language": "PHP",
      "framework_version": "8.10.0",
      "language_version": "7.4.12",
      "exception_class": "Symfony\\Component\\HttpKernel\\Exception\\HttpException",
      "seen_at": 1605901827,
      "message": "",
      "glows": [],
      "solutions": [],
      "stacktrace": [{
          "line_number": 1071,
          "method": "abort",
          "class": "Illuminate\\Foundation\\Application",
          "code_snippet": {
              "1056": "     *",
              "1057": "     * @param  int  $code",
              "1058": "     * @param  string  $message",
              "1059": "     * @param  array  $headers",
              "1060": "     * @return void",
              "1061": "     *",
              "1062": "     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException",
              "1063": "     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException",
              "1064": "     *\/",
              "1065": "    public function abort($code, $message = \u0027\u0027, array $headers = [])",
              "1066": "    {",
              "1067": "        if ($code == 404) {",
              "1068": "            throw new NotFoundHttpException($message);",
              "1069": "        }",
              "1070": "",
              "1071": "        throw new HttpException($code, $message, null, $headers);",
              "1072": "    }",
              "1073": "",
              "1074": "    \/**",
              "1075": "     * Register a terminating callback with the application.",
              "1076": "     *",
              "1077": "     * @param  callable|string  $callback",
              "1078": "     * @return $this",
              "1079": "     *\/",
              "1080": "    public function terminating($callback)",
              "1081": "    {",
              "1082": "        $this-\u003EterminatingCallbacks[] = $callback;",
              "1083": "",
              "1084": "        return $this;",
              "1085": "    }",
              "1086": ""
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Application.php",
          "is_application_frame": false
      }, {
          "line_number": 44,
          "method": "abort",
          "class": null,
          "code_snippet": {
              "29": "     * @param  string  $message",
              "30": "     * @param  array  $headers",
              "31": "     * @return void",
              "32": "     *",
              "33": "     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException",
              "34": "     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException",
              "35": "     *\/",
              "36": "    function abort($code, $message = \u0027\u0027, array $headers = [])",
              "37": "    {",
              "38": "        if ($code instanceof Response) {",
              "39": "            throw new HttpResponseException($code);",
              "40": "        } elseif ($code instanceof Responsable) {",
              "41": "            throw new HttpResponseException($code-\u003EtoResponse(request()));",
              "42": "        }",
              "43": "",
              "44": "        app()-\u003Eabort($code, $message, $headers);",
              "45": "    }",
              "46": "}",
              "47": "",
              "48": "if (! function_exists(\u0027abort_if\u0027)) {",
              "49": "    \/**",
              "50": "     * Throw an HttpException with the given data if the given condition is true.",
              "51": "     *",
              "52": "     * @param  bool  $boolean",
              "53": "     * @param  \\Symfony\\Component\\HttpFoundation\\Response|\\Illuminate\\Contracts\\Support\\Responsable|int  $code",
              "54": "     * @param  string  $message",
              "55": "     * @param  array  $headers",
              "56": "     * @return void",
              "57": "     *",
              "58": "     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException",
              "59": "     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/helpers.php",
          "is_application_frame": false
      }, {
          "line_number": 63,
          "method": "getImage",
          "class": "App\\Http\\Controllers\\ProductsController",
          "code_snippet": {
              "39": "            \u0027image\u0027         =\u003E $image-\u003EhashName(),",
              "40": "            \u0027price\u0027         =\u003E $request-\u003Einput(\u0027price\u0027),",
              "41": "            \u0027is_published\u0027  =\u003E false",
              "42": "        ]);",
              "43": "",
              "44": "        return redirect(\u0027\/products\u0027);",
              "45": "    }",
              "46": "",
              "47": "    public function show(Product $product)",
              "48": "    {",
              "49": "        if (!$product-\u003Eis_published) return abort(403);",
              "50": "        return view(\u0027products.show\u0027, [\u0027product\u0027 =\u003E $product]);",
              "51": "    }",
              "52": "",
              "53": "    public function getImage(string $filename)",
              "54": "    {",
              "55": "        chdir(\u0027storage\/images\u0027);",
              "56": "        if (!File::exists($filename))",
              "57": "        {",
              "58": "            return abort(404);",
              "59": "        }",
              "60": "",
              "61": "        if (!Str::startsWith(File::mimeType($filename), \u0027image\/\u0027))",
              "62": "        {",
              "63": "            return abort(400);",
              "64": "        }",
              "65": "",
              "66": "        return response()-\u003Efile($filename);",
              "67": "    }",
              "68": "}",
              "69": ""
          },
          "file": "\/www\/app\/Http\/Controllers\/ProductsController.php",
          "is_application_frame": true
      }, {
          "line_number": 0,
          "method": "call_user_func_array",
          "class": null,
          "code_snippet": [],
          "file": "unknown",
          "is_application_frame": true
      }, {
          "line_number": 54,
          "method": "callAction",
          "class": "Illuminate\\Routing\\Controller",
          "code_snippet": {
              "39": "     *\/",
              "40": "    public function getMiddleware()",
              "41": "    {",
              "42": "        return $this-\u003Emiddleware;",
              "43": "    }",
              "44": "",
              "45": "    \/**",
              "46": "     * Execute an action on the controller.",
              "47": "     *",
              "48": "     * @param  string  $method",
              "49": "     * @param  array  $parameters",
              "50": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
              "51": "     *\/",
              "52": "    public function callAction($method, $parameters)",
              "53": "    {",
              "54": "        return call_user_func_array([$this, $method], $parameters);",
              "55": "    }",
              "56": "",
              "57": "    \/**",
              "58": "     * Handle calls to missing methods on the controller.",
              "59": "     *",
              "60": "     * @param  string  $method",
              "61": "     * @param  array  $parameters",
              "62": "     * @return mixed",
              "63": "     *",
              "64": "     * @throws \\BadMethodCallException",
              "65": "     *\/",
              "66": "    public function __call($method, $parameters)",
              "67": "    {",
              "68": "        throw new BadMethodCallException(sprintf(",
              "69": "            \u0027Method %s::%s does not exist.\u0027, static::class, $method"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Controller.php",
          "is_application_frame": false
      }, {
          "line_number": 45,
          "method": "dispatch",
          "class": "Illuminate\\Routing\\ControllerDispatcher",
          "code_snippet": {
              "30": "    \/**",
              "31": "     * Dispatch a request to a given controller and method.",
              "32": "     *",
              "33": "     * @param  \\Illuminate\\Routing\\Route  $route",
              "34": "     * @param  mixed  $controller",
              "35": "     * @param  string  $method",
              "36": "     * @return mixed",
              "37": "     *\/",
              "38": "    public function dispatch(Route $route, $controller, $method)",
              "39": "    {",
              "40": "        $parameters = $this-\u003EresolveClassMethodDependencies(",
              "41": "            $route-\u003EparametersWithoutNulls(), $controller, $method",
              "42": "        );",
              "43": "",
              "44": "        if (method_exists($controller, \u0027callAction\u0027)) {",
              "45": "            return $controller-\u003EcallAction($method, $parameters);",
              "46": "        }",
              "47": "",
              "48": "        return $controller-\u003E{$method}(...array_values($parameters));",
              "49": "    }",
              "50": "",
              "51": "    \/**",
              "52": "     * Get the middleware for the controller instance.",
              "53": "     *",
              "54": "     * @param  \\Illuminate\\Routing\\Controller  $controller",
              "55": "     * @param  string  $method",
              "56": "     * @return array",
              "57": "     *\/",
              "58": "    public function getMiddleware($controller, $method)",
              "59": "    {",
              "60": "        if (! method_exists($controller, \u0027getMiddleware\u0027)) {"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/ControllerDispatcher.php",
          "is_application_frame": false
      }, {
          "line_number": 255,
          "method": "runController",
          "class": "Illuminate\\Routing\\Route",
          "code_snippet": {
              "240": "    {",
              "241": "        return is_string($this-\u003Eaction[\u0027uses\u0027]) \u0026\u0026",
              "242": "               Str::startsWith($this-\u003Eaction[\u0027uses\u0027], \u0027C:32:\u0022Opis\\\\Closure\\\\SerializableClosure\u0027) !== false;",
              "243": "    }",
              "244": "",
              "245": "    \/**",
              "246": "     * Run the route action and return the response.",
              "247": "     *",
              "248": "     * @return mixed",
              "249": "     *",
              "250": "     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException",
              "251": "     *\/",
              "252": "    protected function runController()",
              "253": "    {",
              "254": "        return $this-\u003EcontrollerDispatcher()-\u003Edispatch(",
              "255": "            $this, $this-\u003EgetController(), $this-\u003EgetControllerMethod()",
              "256": "        );",
              "257": "    }",
              "258": "",
              "259": "    \/**",
              "260": "     * Get the controller instance for the route.",
              "261": "     *",
              "262": "     * @return mixed",
              "263": "     *\/",
              "264": "    public function getController()",
              "265": "    {",
              "266": "        if (! $this-\u003Econtroller) {",
              "267": "            $class = $this-\u003EparseControllerCallback()[0];",
              "268": "",
              "269": "            $this-\u003Econtroller = $this-\u003Econtainer-\u003Emake(ltrim($class, \u0027\\\\\u0027));",
              "270": "        }"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Route.php",
          "is_application_frame": false
      }, {
          "line_number": 197,
          "method": "run",
          "class": "Illuminate\\Routing\\Route",
          "code_snippet": {
              "182": "    {",
              "183": "        return RouteAction::parse($this-\u003Euri, $action);",
              "184": "    }",
              "185": "",
              "186": "    \/**",
              "187": "     * Run the route action and return the response.",
              "188": "     *",
              "189": "     * @return mixed",
              "190": "     *\/",
              "191": "    public function run()",
              "192": "    {",
              "193": "        $this-\u003Econtainer = $this-\u003Econtainer ?: new Container;",
              "194": "",
              "195": "        try {",
              "196": "            if ($this-\u003EisControllerAction()) {",
              "197": "                return $this-\u003ErunController();",
              "198": "            }",
              "199": "",
              "200": "            return $this-\u003ErunCallable();",
              "201": "        } catch (HttpResponseException $e) {",
              "202": "            return $e-\u003EgetResponse();",
              "203": "        }",
              "204": "    }",
              "205": "",
              "206": "    \/**",
              "207": "     * Checks whether the route\u0027s action is a controller.",
              "208": "     *",
              "209": "     * @return bool",
              "210": "     *\/",
              "211": "    protected function isControllerAction()",
              "212": "    {"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Route.php",
          "is_application_frame": false
      }, {
          "line_number": 691,
          "method": "Illuminate\\Routing\\{closure}",
          "class": "Illuminate\\Routing\\Router",
          "code_snippet": {
              "676": "     * @param  \\Illuminate\\Http\\Request  $request",
              "677": "     * @return mixed",
              "678": "     *\/",
              "679": "    protected function runRouteWithinStack(Route $route, Request $request)",
              "680": "    {",
              "681": "        $shouldSkipMiddleware = $this-\u003Econtainer-\u003Ebound(\u0027middleware.disable\u0027) \u0026\u0026",
              "682": "                                $this-\u003Econtainer-\u003Emake(\u0027middleware.disable\u0027) === true;",
              "683": "",
              "684": "        $middleware = $shouldSkipMiddleware ? [] : $this-\u003EgatherRouteMiddleware($route);",
              "685": "",
              "686": "        return (new Pipeline($this-\u003Econtainer))",
              "687": "                        -\u003Esend($request)",
              "688": "                        -\u003Ethrough($middleware)",
              "689": "                        -\u003Ethen(function ($request) use ($route) {",
              "690": "                            return $this-\u003EprepareResponse(",
              "691": "                                $request, $route-\u003Erun()",
              "692": "                            );",
              "693": "                        });",
              "694": "    }",
              "695": "",
              "696": "    \/**",
              "697": "     * Gather the middleware for the given route with resolved class names.",
              "698": "     *",
              "699": "     * @param  \\Illuminate\\Routing\\Route  $route",
              "700": "     * @return array",
              "701": "     *\/",
              "702": "    public function gatherRouteMiddleware(Route $route)",
              "703": "    {",
              "704": "        $excluded = collect($route-\u003EexcludedMiddleware())-\u003Emap(function ($name) {",
              "705": "            return (array) MiddlewareNameResolver::resolve($name, $this-\u003Emiddleware, $this-\u003EmiddlewareGroups);",
              "706": "        })-\u003Eflatten()-\u003Evalues()-\u003Eall();"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php",
          "is_application_frame": false
      }, {
          "line_number": 128,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "113": "        return $this-\u003Ethen(function ($passable) {",
              "114": "            return $passable;",
              "115": "        });",
              "116": "    }",
              "117": "",
              "118": "    \/**",
              "119": "     * Get the final piece of the Closure onion.",
              "120": "     *",
              "121": "     * @param  \\Closure  $destination",
              "122": "     * @return \\Closure",
              "123": "     *\/",
              "124": "    protected function prepareDestination(Closure $destination)",
              "125": "    {",
              "126": "        return function ($passable) use ($destination) {",
              "127": "            try {",
              "128": "                return $destination($passable);",
              "129": "            } catch (Throwable $e) {",
              "130": "                return $this-\u003EhandleException($passable, $e);",
              "131": "            }",
              "132": "        };",
              "133": "    }",
              "134": "",
              "135": "    \/**",
              "136": "     * Get a Closure that represents a slice of the application onion.",
              "137": "     *",
              "138": "     * @return \\Closure",
              "139": "     *\/",
              "140": "    protected function carry()",
              "141": "    {",
              "142": "        return function ($stack, $pipe) {",
              "143": "            return function ($passable) use ($stack, $pipe) {"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 41,
          "method": "handle",
          "class": "Illuminate\\Routing\\Middleware\\SubstituteBindings",
          "code_snippet": {
              "14": "     *\/",
              "15": "    protected $router;",
              "16": "",
              "17": "    \/**",
              "18": "     * Create a new bindings substitutor.",
              "19": "     *",
              "20": "     * @param  \\Illuminate\\Contracts\\Routing\\Registrar  $router",
              "21": "     * @return void",
              "22": "     *\/",
              "23": "    public function __construct(Registrar $router)",
              "24": "    {",
              "25": "        $this-\u003Erouter = $router;",
              "26": "    }",
              "27": "",
              "28": "    \/**",
              "29": "     * Handle an incoming request.",
              "30": "     *",
              "31": "     * @param  \\Illuminate\\Http\\Request  $request",
              "32": "     * @param  \\Closure  $next",
              "33": "     * @return mixed",
              "34": "     *\/",
              "35": "    public function handle($request, Closure $next)",
              "36": "    {",
              "37": "        $this-\u003Erouter-\u003EsubstituteBindings($route = $request-\u003Eroute());",
              "38": "",
              "39": "        $this-\u003Erouter-\u003EsubstituteImplicitBindings($route);",
              "40": "",
              "41": "        return $next($request);",
              "42": "    }",
              "43": "}",
              "44": ""
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Middleware\/SubstituteBindings.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 44,
          "method": "handle",
          "class": "Illuminate\\Auth\\Middleware\\Authenticate",
          "code_snippet": {
              "29": "",
              "30": "    \/**",
              "31": "     * Handle an incoming request.",
              "32": "     *",
              "33": "     * @param  \\Illuminate\\Http\\Request  $request",
              "34": "     * @param  \\Closure  $next",
              "35": "     * @param  string[]  ...$guards",
              "36": "     * @return mixed",
              "37": "     *",
              "38": "     * @throws \\Illuminate\\Auth\\AuthenticationException",
              "39": "     *\/",
              "40": "    public function handle($request, Closure $next, ...$guards)",
              "41": "    {",
              "42": "        $this-\u003Eauthenticate($request, $guards);",
              "43": "",
              "44": "        return $next($request);",
              "45": "    }",
              "46": "",
              "47": "    \/**",
              "48": "     * Determine if the user is logged in to any of the given guards.",
              "49": "     *",
              "50": "     * @param  \\Illuminate\\Http\\Request  $request",
              "51": "     * @param  array  $guards",
              "52": "     * @return void",
              "53": "     *",
              "54": "     * @throws \\Illuminate\\Auth\\AuthenticationException",
              "55": "     *\/",
              "56": "    protected function authenticate($request, array $guards)",
              "57": "    {",
              "58": "        if (empty($guards)) {",
              "59": "            $guards = [null];"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Auth\/Middleware\/Authenticate.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 77,
          "method": "handle",
          "class": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
          "code_snippet": {
              "62": "     *",
              "63": "     * @param  \\Illuminate\\Http\\Request  $request",
              "64": "     * @param  \\Closure  $next",
              "65": "     * @return mixed",
              "66": "     *",
              "67": "     * @throws \\Illuminate\\Session\\TokenMismatchException",
              "68": "     *\/",
              "69": "    public function handle($request, Closure $next)",
              "70": "    {",
              "71": "        if (",
              "72": "            $this-\u003EisReading($request) ||",
              "73": "            $this-\u003ErunningUnitTests() ||",
              "74": "            $this-\u003EinExceptArray($request) ||",
              "75": "            $this-\u003EtokensMatch($request)",
              "76": "        ) {",
              "77": "            return tap($next($request), function ($response) use ($request) {",
              "78": "                if ($this-\u003EshouldAddXsrfTokenCookie()) {",
              "79": "                    $this-\u003EaddCookieToResponse($request, $response);",
              "80": "                }",
              "81": "            });",
              "82": "        }",
              "83": "",
              "84": "        throw new TokenMismatchException(\u0027CSRF token mismatch.\u0027);",
              "85": "    }",
              "86": "",
              "87": "    \/**",
              "88": "     * Determine if the HTTP request uses a \u2018read\u2019 verb.",
              "89": "     *",
              "90": "     * @param  \\Illuminate\\Http\\Request  $request",
              "91": "     * @return bool",
              "92": "     *\/"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/VerifyCsrfToken.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 49,
          "method": "handle",
          "class": "Illuminate\\View\\Middleware\\ShareErrorsFromSession",
          "code_snippet": {
              "22": "     * @return void",
              "23": "     *\/",
              "24": "    public function __construct(ViewFactory $view)",
              "25": "    {",
              "26": "        $this-\u003Eview = $view;",
              "27": "    }",
              "28": "",
              "29": "    \/**",
              "30": "     * Handle an incoming request.",
              "31": "     *",
              "32": "     * @param  \\Illuminate\\Http\\Request  $request",
              "33": "     * @param  \\Closure  $next",
              "34": "     * @return mixed",
              "35": "     *\/",
              "36": "    public function handle($request, Closure $next)",
              "37": "    {",
              "38": "        \/\/ If the current session has an \u0022errors\u0022 variable bound to it, we will share",
              "39": "        \/\/ its value with all view instances so the views can easily access errors",
              "40": "        \/\/ without having to bind. An empty bag is set when there aren\u0027t errors.",
              "41": "        $this-\u003Eview-\u003Eshare(",
              "42": "            \u0027errors\u0027, $request-\u003Esession()-\u003Eget(\u0027errors\u0027) ?: new ViewErrorBag",
              "43": "        );",
              "44": "",
              "45": "        \/\/ Putting the errors in the view for every view allows the developer to just",
              "46": "        \/\/ assume that some errors are always available, which is convenient since",
              "47": "        \/\/ they don\u0027t have to continually run checks for the presence of errors.",
              "48": "",
              "49": "        return $next($request);",
              "50": "    }",
              "51": "}",
              "52": ""
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/View\/Middleware\/ShareErrorsFromSession.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 121,
          "method": "handleStatefulRequest",
          "class": "Illuminate\\Session\\Middleware\\StartSession",
          "code_snippet": {
              "106": "     * @param  \\Illuminate\\Contracts\\Session\\Session  $session",
              "107": "     * @param  \\Closure  $next",
              "108": "     * @return mixed",
              "109": "     *\/",
              "110": "    protected function handleStatefulRequest(Request $request, $session, Closure $next)",
              "111": "    {",
              "112": "        \/\/ If a session driver has been configured, we will need to start the session here",
              "113": "        \/\/ so that the data is ready for an application. Note that the Laravel sessions",
              "114": "        \/\/ do not make use of PHP \u0022native\u0022 sessions in any way since they are crappy.",
              "115": "        $request-\u003EsetLaravelSession(",
              "116": "            $this-\u003EstartSession($request, $session)",
              "117": "        );",
              "118": "",
              "119": "        $this-\u003EcollectGarbage($session);",
              "120": "",
              "121": "        $response = $next($request);",
              "122": "",
              "123": "        $this-\u003EstoreCurrentUrl($request, $session);",
              "124": "",
              "125": "        $this-\u003EaddCookieToResponse($response, $session);",
              "126": "",
              "127": "        \/\/ Again, if the session has been configured we will need to close out the session",
              "128": "        \/\/ so that the attributes may be persisted to some storage medium. We will also",
              "129": "        \/\/ add the session identifier cookie to the application response headers now.",
              "130": "        $this-\u003EsaveSession($request);",
              "131": "",
              "132": "        return $response;",
              "133": "    }",
              "134": "",
              "135": "    \/**",
              "136": "     * Start the session for the given request."
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Session\/Middleware\/StartSession.php",
          "is_application_frame": false
      }, {
          "line_number": 63,
          "method": "handle",
          "class": "Illuminate\\Session\\Middleware\\StartSession",
          "code_snippet": {
              "48": "     * @param  \\Closure  $next",
              "49": "     * @return mixed",
              "50": "     *\/",
              "51": "    public function handle($request, Closure $next)",
              "52": "    {",
              "53": "        if (! $this-\u003EsessionConfigured()) {",
              "54": "            return $next($request);",
              "55": "        }",
              "56": "",
              "57": "        $session = $this-\u003EgetSession($request);",
              "58": "",
              "59": "        if ($this-\u003Emanager-\u003EshouldBlock() ||",
              "60": "            ($request-\u003Eroute() instanceof Route \u0026\u0026 $request-\u003Eroute()-\u003ElocksFor())) {",
              "61": "            return $this-\u003EhandleRequestWhileBlocking($request, $session, $next);",
              "62": "        } else {",
              "63": "            return $this-\u003EhandleStatefulRequest($request, $session, $next);",
              "64": "        }",
              "65": "    }",
              "66": "",
              "67": "    \/**",
              "68": "     * Handle the given request within session state.",
              "69": "     *",
              "70": "     * @param  \\Illuminate\\Http\\Request  $request",
              "71": "     * @param  \\Illuminate\\Contracts\\Session\\Session  $session",
              "72": "     * @param  \\Closure  $next",
              "73": "     * @return mixed",
              "74": "     *\/",
              "75": "    protected function handleRequestWhileBlocking(Request $request, $session, Closure $next)",
              "76": "    {",
              "77": "        if (! $request-\u003Eroute() instanceof Route) {",
              "78": "            return;"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Session\/Middleware\/StartSession.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 37,
          "method": "handle",
          "class": "Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse",
          "code_snippet": {
              "16": "",
              "17": "    \/**",
              "18": "     * Create a new CookieQueue instance.",
              "19": "     *",
              "20": "     * @param  \\Illuminate\\Contracts\\Cookie\\QueueingFactory  $cookies",
              "21": "     * @return void",
              "22": "     *\/",
              "23": "    public function __construct(CookieJar $cookies)",
              "24": "    {",
              "25": "        $this-\u003Ecookies = $cookies;",
              "26": "    }",
              "27": "",
              "28": "    \/**",
              "29": "     * Handle an incoming request.",
              "30": "     *",
              "31": "     * @param  \\Illuminate\\Http\\Request  $request",
              "32": "     * @param  \\Closure  $next",
              "33": "     * @return mixed",
              "34": "     *\/",
              "35": "    public function handle($request, Closure $next)",
              "36": "    {",
              "37": "        $response = $next($request);",
              "38": "",
              "39": "        foreach ($this-\u003Ecookies-\u003EgetQueuedCookies() as $cookie) {",
              "40": "            $response-\u003Eheaders-\u003EsetCookie($cookie);",
              "41": "        }",
              "42": "",
              "43": "        return $response;",
              "44": "    }",
              "45": "}",
              "46": ""
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Cookie\/Middleware\/AddQueuedCookiesToResponse.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 67,
          "method": "handle",
          "class": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
          "code_snippet": {
              "52": "     *\/",
              "53": "    public function disableFor($name)",
              "54": "    {",
              "55": "        $this-\u003Eexcept = array_merge($this-\u003Eexcept, (array) $name);",
              "56": "    }",
              "57": "",
              "58": "    \/**",
              "59": "     * Handle an incoming request.",
              "60": "     *",
              "61": "     * @param  \\Illuminate\\Http\\Request  $request",
              "62": "     * @param  \\Closure  $next",
              "63": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
              "64": "     *\/",
              "65": "    public function handle($request, Closure $next)",
              "66": "    {",
              "67": "        return $this-\u003Eencrypt($next($this-\u003Edecrypt($request)));",
              "68": "    }",
              "69": "",
              "70": "    \/**",
              "71": "     * Decrypt the cookies on the request.",
              "72": "     *",
              "73": "     * @param  \\Symfony\\Component\\HttpFoundation\\Request  $request",
              "74": "     * @return \\Symfony\\Component\\HttpFoundation\\Request",
              "75": "     *\/",
              "76": "    protected function decrypt(Request $request)",
              "77": "    {",
              "78": "        foreach ($request-\u003Ecookies as $key =\u003E $cookie) {",
              "79": "            if ($this-\u003EisDisabled($key)) {",
              "80": "                continue;",
              "81": "            }",
              "82": ""
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Cookie\/Middleware\/EncryptCookies.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 103,
          "method": "then",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "88": "        return $this;",
              "89": "    }",
              "90": "",
              "91": "    \/**",
              "92": "     * Run the pipeline with a final destination callback.",
              "93": "     *",
              "94": "     * @param  \\Closure  $destination",
              "95": "     * @return mixed",
              "96": "     *\/",
              "97": "    public function then(Closure $destination)",
              "98": "    {",
              "99": "        $pipeline = array_reduce(",
              "100": "            array_reverse($this-\u003Epipes()), $this-\u003Ecarry(), $this-\u003EprepareDestination($destination)",
              "101": "        );",
              "102": "",
              "103": "        return $pipeline($this-\u003Epassable);",
              "104": "    }",
              "105": "",
              "106": "    \/**",
              "107": "     * Run the pipeline and return the result.",
              "108": "     *",
              "109": "     * @return mixed",
              "110": "     *\/",
              "111": "    public function thenReturn()",
              "112": "    {",
              "113": "        return $this-\u003Ethen(function ($passable) {",
              "114": "            return $passable;",
              "115": "        });",
              "116": "    }",
              "117": "",
              "118": "    \/**"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 693,
          "method": "runRouteWithinStack",
          "class": "Illuminate\\Routing\\Router",
          "code_snippet": {
              "678": "     *\/",
              "679": "    protected function runRouteWithinStack(Route $route, Request $request)",
              "680": "    {",
              "681": "        $shouldSkipMiddleware = $this-\u003Econtainer-\u003Ebound(\u0027middleware.disable\u0027) \u0026\u0026",
              "682": "                                $this-\u003Econtainer-\u003Emake(\u0027middleware.disable\u0027) === true;",
              "683": "",
              "684": "        $middleware = $shouldSkipMiddleware ? [] : $this-\u003EgatherRouteMiddleware($route);",
              "685": "",
              "686": "        return (new Pipeline($this-\u003Econtainer))",
              "687": "                        -\u003Esend($request)",
              "688": "                        -\u003Ethrough($middleware)",
              "689": "                        -\u003Ethen(function ($request) use ($route) {",
              "690": "                            return $this-\u003EprepareResponse(",
              "691": "                                $request, $route-\u003Erun()",
              "692": "                            );",
              "693": "                        });",
              "694": "    }",
              "695": "",
              "696": "    \/**",
              "697": "     * Gather the middleware for the given route with resolved class names.",
              "698": "     *",
              "699": "     * @param  \\Illuminate\\Routing\\Route  $route",
              "700": "     * @return array",
              "701": "     *\/",
              "702": "    public function gatherRouteMiddleware(Route $route)",
              "703": "    {",
              "704": "        $excluded = collect($route-\u003EexcludedMiddleware())-\u003Emap(function ($name) {",
              "705": "            return (array) MiddlewareNameResolver::resolve($name, $this-\u003Emiddleware, $this-\u003EmiddlewareGroups);",
              "706": "        })-\u003Eflatten()-\u003Evalues()-\u003Eall();",
              "707": "",
              "708": "        $middleware = collect($route-\u003EgatherMiddleware())-\u003Emap(function ($name) {"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php",
          "is_application_frame": false
      }, {
          "line_number": 668,
          "method": "runRoute",
          "class": "Illuminate\\Routing\\Router",
          "code_snippet": {
              "653": "     * Return the response for the given route.",
              "654": "     *",
              "655": "     * @param  \\Illuminate\\Http\\Request  $request",
              "656": "     * @param  \\Illuminate\\Routing\\Route  $route",
              "657": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
              "658": "     *\/",
              "659": "    protected function runRoute(Request $request, Route $route)",
              "660": "    {",
              "661": "        $request-\u003EsetRouteResolver(function () use ($route) {",
              "662": "            return $route;",
              "663": "        });",
              "664": "",
              "665": "        $this-\u003Eevents-\u003Edispatch(new RouteMatched($route, $request));",
              "666": "",
              "667": "        return $this-\u003EprepareResponse($request,",
              "668": "            $this-\u003ErunRouteWithinStack($route, $request)",
              "669": "        );",
              "670": "    }",
              "671": "",
              "672": "    \/**",
              "673": "     * Run the given route within a Stack \u0022onion\u0022 instance.",
              "674": "     *",
              "675": "     * @param  \\Illuminate\\Routing\\Route  $route",
              "676": "     * @param  \\Illuminate\\Http\\Request  $request",
              "677": "     * @return mixed",
              "678": "     *\/",
              "679": "    protected function runRouteWithinStack(Route $route, Request $request)",
              "680": "    {",
              "681": "        $shouldSkipMiddleware = $this-\u003Econtainer-\u003Ebound(\u0027middleware.disable\u0027) \u0026\u0026",
              "682": "                                $this-\u003Econtainer-\u003Emake(\u0027middleware.disable\u0027) === true;",
              "683": ""
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php",
          "is_application_frame": false
      }, {
          "line_number": 634,
          "method": "dispatchToRoute",
          "class": "Illuminate\\Routing\\Router",
          "code_snippet": {
              "619": "    public function dispatch(Request $request)",
              "620": "    {",
              "621": "        $this-\u003EcurrentRequest = $request;",
              "622": "",
              "623": "        return $this-\u003EdispatchToRoute($request);",
              "624": "    }",
              "625": "",
              "626": "    \/**",
              "627": "     * Dispatch the request to a route and return the response.",
              "628": "     *",
              "629": "     * @param  \\Illuminate\\Http\\Request  $request",
              "630": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
              "631": "     *\/",
              "632": "    public function dispatchToRoute(Request $request)",
              "633": "    {",
              "634": "        return $this-\u003ErunRoute($request, $this-\u003EfindRoute($request));",
              "635": "    }",
              "636": "",
              "637": "    \/**",
              "638": "     * Find the route matching a given request.",
              "639": "     *",
              "640": "     * @param  \\Illuminate\\Http\\Request  $request",
              "641": "     * @return \\Illuminate\\Routing\\Route",
              "642": "     *\/",
              "643": "    protected function findRoute($request)",
              "644": "    {",
              "645": "        $this-\u003Ecurrent = $route = $this-\u003Eroutes-\u003Ematch($request);",
              "646": "",
              "647": "        $this-\u003Econtainer-\u003Einstance(Route::class, $route);",
              "648": "",
              "649": "        return $route;"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php",
          "is_application_frame": false
      }, {
          "line_number": 623,
          "method": "dispatch",
          "class": "Illuminate\\Routing\\Router",
          "code_snippet": {
              "608": "        $route = tap($this-\u003Eroutes-\u003EgetByName($name))-\u003Ebind($this-\u003EcurrentRequest);",
              "609": "",
              "610": "        return $this-\u003ErunRoute($this-\u003EcurrentRequest, $route);",
              "611": "    }",
              "612": "",
              "613": "    \/**",
              "614": "     * Dispatch the request to the application.",
              "615": "     *",
              "616": "     * @param  \\Illuminate\\Http\\Request  $request",
              "617": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
              "618": "     *\/",
              "619": "    public function dispatch(Request $request)",
              "620": "    {",
              "621": "        $this-\u003EcurrentRequest = $request;",
              "622": "",
              "623": "        return $this-\u003EdispatchToRoute($request);",
              "624": "    }",
              "625": "",
              "626": "    \/**",
              "627": "     * Dispatch the request to a route and return the response.",
              "628": "     *",
              "629": "     * @param  \\Illuminate\\Http\\Request  $request",
              "630": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
              "631": "     *\/",
              "632": "    public function dispatchToRoute(Request $request)",
              "633": "    {",
              "634": "        return $this-\u003ErunRoute($request, $this-\u003EfindRoute($request));",
              "635": "    }",
              "636": "",
              "637": "    \/**",
              "638": "     * Find the route matching a given request."
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php",
          "is_application_frame": false
      }, {
          "line_number": 166,
          "method": "Illuminate\\Foundation\\Http\\{closure}",
          "class": "Illuminate\\Foundation\\Http\\Kernel",
          "code_snippet": {
              "151": "        if (! $this-\u003Eapp-\u003EhasBeenBootstrapped()) {",
              "152": "            $this-\u003Eapp-\u003EbootstrapWith($this-\u003Ebootstrappers());",
              "153": "        }",
              "154": "    }",
              "155": "",
              "156": "    \/**",
              "157": "     * Get the route dispatcher callback.",
              "158": "     *",
              "159": "     * @return \\Closure",
              "160": "     *\/",
              "161": "    protected function dispatchToRouter()",
              "162": "    {",
              "163": "        return function ($request) {",
              "164": "            $this-\u003Eapp-\u003Einstance(\u0027request\u0027, $request);",
              "165": "",
              "166": "            return $this-\u003Erouter-\u003Edispatch($request);",
              "167": "        };",
              "168": "    }",
              "169": "",
              "170": "    \/**",
              "171": "     * Call the terminate method on any terminable middleware.",
              "172": "     *",
              "173": "     * @param  \\Illuminate\\Http\\Request  $request",
              "174": "     * @param  \\Illuminate\\Http\\Response  $response",
              "175": "     * @return void",
              "176": "     *\/",
              "177": "    public function terminate($request, $response)",
              "178": "    {",
              "179": "        $this-\u003EterminateMiddleware($request, $response);",
              "180": "",
              "181": "        $this-\u003Eapp-\u003Eterminate();"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Kernel.php",
          "is_application_frame": false
      }, {
          "line_number": 128,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "113": "        return $this-\u003Ethen(function ($passable) {",
              "114": "            return $passable;",
              "115": "        });",
              "116": "    }",
              "117": "",
              "118": "    \/**",
              "119": "     * Get the final piece of the Closure onion.",
              "120": "     *",
              "121": "     * @param  \\Closure  $destination",
              "122": "     * @return \\Closure",
              "123": "     *\/",
              "124": "    protected function prepareDestination(Closure $destination)",
              "125": "    {",
              "126": "        return function ($passable) use ($destination) {",
              "127": "            try {",
              "128": "                return $destination($passable);",
              "129": "            } catch (Throwable $e) {",
              "130": "                return $this-\u003EhandleException($passable, $e);",
              "131": "            }",
              "132": "        };",
              "133": "    }",
              "134": "",
              "135": "    \/**",
              "136": "     * Get a Closure that represents a slice of the application onion.",
              "137": "     *",
              "138": "     * @return \\Closure",
              "139": "     *\/",
              "140": "    protected function carry()",
              "141": "    {",
              "142": "        return function ($stack, $pipe) {",
              "143": "            return function ($passable) use ($stack, $pipe) {"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 21,
          "method": "handle",
          "class": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
          "code_snippet": {
              "6": "use Symfony\\Component\\HttpFoundation\\ParameterBag;",
              "7": "",
              "8": "class TransformsRequest",
              "9": "{",
              "10": "    \/**",
              "11": "     * Handle an incoming request.",
              "12": "     *",
              "13": "     * @param  \\Illuminate\\Http\\Request  $request",
              "14": "     * @param  \\Closure  $next",
              "15": "     * @return mixed",
              "16": "     *\/",
              "17": "    public function handle($request, Closure $next)",
              "18": "    {",
              "19": "        $this-\u003Eclean($request);",
              "20": "",
              "21": "        return $next($request);",
              "22": "    }",
              "23": "",
              "24": "    \/**",
              "25": "     * Clean the request\u0027s data.",
              "26": "     *",
              "27": "     * @param  \\Illuminate\\Http\\Request  $request",
              "28": "     * @return void",
              "29": "     *\/",
              "30": "    protected function clean($request)",
              "31": "    {",
              "32": "        $this-\u003EcleanParameterBag($request-\u003Equery);",
              "33": "",
              "34": "        if ($request-\u003EisJson()) {",
              "35": "            $this-\u003EcleanParameterBag($request-\u003Ejson());",
              "36": "        } elseif ($request-\u003Erequest !== $request-\u003Equery) {"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/TransformsRequest.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 21,
          "method": "handle",
          "class": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
          "code_snippet": {
              "6": "use Symfony\\Component\\HttpFoundation\\ParameterBag;",
              "7": "",
              "8": "class TransformsRequest",
              "9": "{",
              "10": "    \/**",
              "11": "     * Handle an incoming request.",
              "12": "     *",
              "13": "     * @param  \\Illuminate\\Http\\Request  $request",
              "14": "     * @param  \\Closure  $next",
              "15": "     * @return mixed",
              "16": "     *\/",
              "17": "    public function handle($request, Closure $next)",
              "18": "    {",
              "19": "        $this-\u003Eclean($request);",
              "20": "",
              "21": "        return $next($request);",
              "22": "    }",
              "23": "",
              "24": "    \/**",
              "25": "     * Clean the request\u0027s data.",
              "26": "     *",
              "27": "     * @param  \\Illuminate\\Http\\Request  $request",
              "28": "     * @return void",
              "29": "     *\/",
              "30": "    protected function clean($request)",
              "31": "    {",
              "32": "        $this-\u003EcleanParameterBag($request-\u003Equery);",
              "33": "",
              "34": "        if ($request-\u003EisJson()) {",
              "35": "            $this-\u003EcleanParameterBag($request-\u003Ejson());",
              "36": "        } elseif ($request-\u003Erequest !== $request-\u003Equery) {"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/TransformsRequest.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 27,
          "method": "handle",
          "class": "Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize",
          "code_snippet": {
              "12": "     *",
              "13": "     * @param  \\Illuminate\\Http\\Request  $request",
              "14": "     * @param  \\Closure  $next",
              "15": "     * @return mixed",
              "16": "     *",
              "17": "     * @throws \\Illuminate\\Http\\Exceptions\\PostTooLargeException",
              "18": "     *\/",
              "19": "    public function handle($request, Closure $next)",
              "20": "    {",
              "21": "        $max = $this-\u003EgetPostMaxSize();",
              "22": "",
              "23": "        if ($max \u003E 0 \u0026\u0026 $request-\u003Eserver(\u0027CONTENT_LENGTH\u0027) \u003E $max) {",
              "24": "            throw new PostTooLargeException;",
              "25": "        }",
              "26": "",
              "27": "        return $next($request);",
              "28": "    }",
              "29": "",
              "30": "    \/**",
              "31": "     * Determine the server \u0027post_max_size\u0027 as bytes.",
              "32": "     *",
              "33": "     * @return int",
              "34": "     *\/",
              "35": "    protected function getPostMaxSize()",
              "36": "    {",
              "37": "        if (is_numeric($postMaxSize = ini_get(\u0027post_max_size\u0027))) {",
              "38": "            return (int) $postMaxSize;",
              "39": "        }",
              "40": "",
              "41": "        $metric = strtoupper(substr($postMaxSize, -1));",
              "42": "        $postMaxSize = (int) $postMaxSize;"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/ValidatePostSize.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 87,
          "method": "handle",
          "class": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance",
          "code_snippet": {
              "72": "                return response(",
              "73": "                    $data[\u0027template\u0027],",
              "74": "                    $data[\u0027status\u0027] ?? 503,",
              "75": "                    isset($data[\u0027retry\u0027]) ? [\u0027Retry-After\u0027 =\u003E $data[\u0027retry\u0027]] : []",
              "76": "                );",
              "77": "            }",
              "78": "",
              "79": "            throw new HttpException(",
              "80": "                $data[\u0027status\u0027] ?? 503,",
              "81": "                \u0027Service Unavailable\u0027,",
              "82": "                null,",
              "83": "                isset($data[\u0027retry\u0027]) ? [\u0027Retry-After\u0027 =\u003E $data[\u0027retry\u0027]] : []",
              "84": "            );",
              "85": "        }",
              "86": "",
              "87": "        return $next($request);",
              "88": "    }",
              "89": "",
              "90": "    \/**",
              "91": "     * Determine if the incoming request has a maintenance mode bypass cookie.",
              "92": "     *",
              "93": "     * @param  \\Illuminate\\Http\\Request  $request",
              "94": "     * @param  array  $data",
              "95": "     * @return bool",
              "96": "     *\/",
              "97": "    protected function hasValidBypassCookie($request, array $data)",
              "98": "    {",
              "99": "        return isset($data[\u0027secret\u0027]) \u0026\u0026",
              "100": "                $request-\u003Ecookie(\u0027laravel_maintenance\u0027) \u0026\u0026",
              "101": "                MaintenanceModeBypassCookie::isValid(",
              "102": "                    $request-\u003Ecookie(\u0027laravel_maintenance\u0027),"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Middleware\/PreventRequestsDuringMaintenance.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 37,
          "method": "handle",
          "class": "Fruitcake\\Cors\\HandleCors",
          "code_snippet": {
              "22": "        $this-\u003Ecors = $cors;",
              "23": "        $this-\u003Econtainer = $container;",
              "24": "    }",
              "25": "",
              "26": "    \/**",
              "27": "     * Handle an incoming request. Based on Asm89\\Stack\\Cors by asm89",
              "28": "     *",
              "29": "     * @param  \\Illuminate\\Http\\Request  $request",
              "30": "     * @param  \\Closure  $next",
              "31": "     * @return Response",
              "32": "     *\/",
              "33": "    public function handle($request, Closure $next)",
              "34": "    {",
              "35": "        \/\/ Check if we\u0027re dealing with CORS and if we should handle it",
              "36": "        if (! $this-\u003EshouldRun($request)) {",
              "37": "            return $next($request);",
              "38": "        }",
              "39": "",
              "40": "        \/\/ For Preflight, return the Preflight response",
              "41": "        if ($this-\u003Ecors-\u003EisPreflightRequest($request)) {",
              "42": "            $response = $this-\u003Ecors-\u003EhandlePreflightRequest($request);",
              "43": "",
              "44": "            $this-\u003Ecors-\u003EvaryHeader($response, \u0027Access-Control-Request-Method\u0027);",
              "45": "",
              "46": "            return $response;",
              "47": "        }",
              "48": "",
              "49": "        \/\/ Add the headers on the Request Handled event as fallback in case of exceptions",
              "50": "        if (class_exists(RequestHandled::class) \u0026\u0026 $this-\u003Econtainer-\u003Ebound(\u0027events\u0027)) {",
              "51": "            $this-\u003Econtainer-\u003Emake(\u0027events\u0027)-\u003Elisten(RequestHandled::class, function (RequestHandled $event) {",
              "52": "                $this-\u003EaddHeaders($event-\u003Erequest, $event-\u003Eresponse);"
          },
          "file": "\/www\/vendor\/fruitcake\/laravel-cors\/src\/HandleCors.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 57,
          "method": "handle",
          "class": "Fideloper\\Proxy\\TrustProxies",
          "code_snippet": {
              "42": "    \/**",
              "43": "     * Handle an incoming request.",
              "44": "     *",
              "45": "     * @param \\Illuminate\\Http\\Request $request",
              "46": "     * @param \\Closure                 $next",
              "47": "     *",
              "48": "     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException",
              "49": "     *",
              "50": "     * @return mixed",
              "51": "     *\/",
              "52": "    public function handle(Request $request, Closure $next)",
              "53": "    {",
              "54": "        $request::setTrustedProxies([], $this-\u003EgetTrustedHeaderNames()); \/\/ Reset trusted proxies between requests",
              "55": "        $this-\u003EsetTrustedProxyIpAddresses($request);",
              "56": "",
              "57": "        return $next($request);",
              "58": "    }",
              "59": "",
              "60": "    \/**",
              "61": "     * Sets the trusted proxies on the request to the value of trustedproxy.proxies",
              "62": "     *",
              "63": "     * @param \\Illuminate\\Http\\Request $request",
              "64": "     *\/",
              "65": "    protected function setTrustedProxyIpAddresses(Request $request)",
              "66": "    {",
              "67": "        $trustedIps = $this-\u003Eproxies ?: $this-\u003Econfig-\u003Eget(\u0027trustedproxy.proxies\u0027);",
              "68": "",
              "69": "        \/\/ Trust any IP address that calls us",
              "70": "        \/\/ `**` for backwards compatibility, but is deprecated",
              "71": "        if ($trustedIps === \u0027*\u0027 || $trustedIps === \u0027**\u0027) {",
              "72": "            return $this-\u003EsetTrustedProxyIpAddressesToTheCallingIp($request);"
          },
          "file": "\/www\/vendor\/fideloper\/proxy\/src\/TrustProxies.php",
          "is_application_frame": false
      }, {
          "line_number": 167,
          "method": "Illuminate\\Pipeline\\{closure}",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "152": "",
              "153": "                        \/\/ If the pipe is a string we will parse the string and resolve the class out",
              "154": "                        \/\/ of the dependency injection container. We can then build a callable and",
              "155": "                        \/\/ execute the pipe function giving in the parameters that are required.",
              "156": "                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);",
              "157": "",
              "158": "                        $parameters = array_merge([$passable, $stack], $parameters);",
              "159": "                    } else {",
              "160": "                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to",
              "161": "                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting",
              "162": "                        \/\/ since the object we\u0027re given was already a fully instantiated object.",
              "163": "                        $parameters = [$passable, $stack];",
              "164": "                    }",
              "165": "",
              "166": "                    $carry = method_exists($pipe, $this-\u003Emethod)",
              "167": "                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)",
              "168": "                                    : $pipe(...$parameters);",
              "169": "",
              "170": "                    return $this-\u003EhandleCarry($carry);",
              "171": "                } catch (Throwable $e) {",
              "172": "                    return $this-\u003EhandleException($passable, $e);",
              "173": "                }",
              "174": "            };",
              "175": "        };",
              "176": "    }",
              "177": "",
              "178": "    \/**",
              "179": "     * Parse full pipe string to get name and parameters.",
              "180": "     *",
              "181": "     * @param  string  $pipe",
              "182": "     * @return array"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 103,
          "method": "then",
          "class": "Illuminate\\Pipeline\\Pipeline",
          "code_snippet": {
              "88": "        return $this;",
              "89": "    }",
              "90": "",
              "91": "    \/**",
              "92": "     * Run the pipeline with a final destination callback.",
              "93": "     *",
              "94": "     * @param  \\Closure  $destination",
              "95": "     * @return mixed",
              "96": "     *\/",
              "97": "    public function then(Closure $destination)",
              "98": "    {",
              "99": "        $pipeline = array_reduce(",
              "100": "            array_reverse($this-\u003Epipes()), $this-\u003Ecarry(), $this-\u003EprepareDestination($destination)",
              "101": "        );",
              "102": "",
              "103": "        return $pipeline($this-\u003Epassable);",
              "104": "    }",
              "105": "",
              "106": "    \/**",
              "107": "     * Run the pipeline and return the result.",
              "108": "     *",
              "109": "     * @return mixed",
              "110": "     *\/",
              "111": "    public function thenReturn()",
              "112": "    {",
              "113": "        return $this-\u003Ethen(function ($passable) {",
              "114": "            return $passable;",
              "115": "        });",
              "116": "    }",
              "117": "",
              "118": "    \/**"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Pipeline\/Pipeline.php",
          "is_application_frame": false
      }, {
          "line_number": 141,
          "method": "sendRequestThroughRouter",
          "class": "Illuminate\\Foundation\\Http\\Kernel",
          "code_snippet": {
              "126": "     *",
              "127": "     * @param  \\Illuminate\\Http\\Request  $request",
              "128": "     * @return \\Illuminate\\Http\\Response",
              "129": "     *\/",
              "130": "    protected function sendRequestThroughRouter($request)",
              "131": "    {",
              "132": "        $this-\u003Eapp-\u003Einstance(\u0027request\u0027, $request);",
              "133": "",
              "134": "        Facade::clearResolvedInstance(\u0027request\u0027);",
              "135": "",
              "136": "        $this-\u003Ebootstrap();",
              "137": "",
              "138": "        return (new Pipeline($this-\u003Eapp))",
              "139": "                    -\u003Esend($request)",
              "140": "                    -\u003Ethrough($this-\u003Eapp-\u003EshouldSkipMiddleware() ? [] : $this-\u003Emiddleware)",
              "141": "                    -\u003Ethen($this-\u003EdispatchToRouter());",
              "142": "    }",
              "143": "",
              "144": "    \/**",
              "145": "     * Bootstrap the application for HTTP requests.",
              "146": "     *",
              "147": "     * @return void",
              "148": "     *\/",
              "149": "    public function bootstrap()",
              "150": "    {",
              "151": "        if (! $this-\u003Eapp-\u003EhasBeenBootstrapped()) {",
              "152": "            $this-\u003Eapp-\u003EbootstrapWith($this-\u003Ebootstrappers());",
              "153": "        }",
              "154": "    }",
              "155": "",
              "156": "    \/**"
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Kernel.php",
          "is_application_frame": false
      }, {
          "line_number": 110,
          "method": "handle",
          "class": "Illuminate\\Foundation\\Http\\Kernel",
          "code_snippet": {
              "95": "",
              "96": "        $this-\u003EsyncMiddlewareToRouter();",
              "97": "    }",
              "98": "",
              "99": "    \/**",
              "100": "     * Handle an incoming HTTP request.",
              "101": "     *",
              "102": "     * @param  \\Illuminate\\Http\\Request  $request",
              "103": "     * @return \\Illuminate\\Http\\Response",
              "104": "     *\/",
              "105": "    public function handle($request)",
              "106": "    {",
              "107": "        try {",
              "108": "            $request-\u003EenableHttpMethodParameterOverride();",
              "109": "",
              "110": "            $response = $this-\u003EsendRequestThroughRouter($request);",
              "111": "        } catch (Throwable $e) {",
              "112": "            $this-\u003EreportException($e);",
              "113": "",
              "114": "            $response = $this-\u003ErenderException($request, $e);",
              "115": "        }",
              "116": "",
              "117": "        $this-\u003Eapp[\u0027events\u0027]-\u003Edispatch(",
              "118": "            new RequestHandled($request, $response)",
              "119": "        );",
              "120": "",
              "121": "        return $response;",
              "122": "    }",
              "123": "",
              "124": "    \/**",
              "125": "     * Send the given request through the middleware \/ router."
          },
          "file": "\/www\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Http\/Kernel.php",
          "is_application_frame": false
      }, {
          "line_number": 52,
          "method": "[top]",
          "class": null,
          "code_snippet": {
              "26": "|--------------------------------------------------------------------------",
              "27": "|",
              "28": "| Composer provides a convenient, automatically generated class loader for",
              "29": "| this application. We just need to utilize it! We\u0027ll simply require it",
              "30": "| into the script here so we don\u0027t need to manually load our classes.",
              "31": "|",
              "32": "*\/",
              "33": "",
              "34": "require __DIR__.\u0027\/..\/vendor\/autoload.php\u0027;",
              "35": "",
              "36": "\/*",
              "37": "|--------------------------------------------------------------------------",
              "38": "| Run The Application",
              "39": "|--------------------------------------------------------------------------",
              "40": "|",
              "41": "| Once we have the application, we can handle the incoming request using",
              "42": "| the application\u0027s HTTP kernel. Then, we will send the response back",
              "43": "| to this client\u0027s browser, allowing them to enjoy our application.",
              "44": "|",
              "45": "*\/",
              "46": "",
              "47": "$app = require_once __DIR__.\u0027\/..\/bootstrap\/app.php\u0027;",
              "48": "",
              "49": "$kernel = $app-\u003Emake(Kernel::class);",
              "50": "",
              "51": "$response = tap($kernel-\u003Ehandle(",
              "52": "    $request = Request::capture()",
              "53": "))-\u003Esend();",
              "54": "",
              "55": "$kernel-\u003Eterminate($request, $response);",
              "56": ""
          },
          "file": "\/www\/public\/index.php",
          "is_application_frame": false
      }],
      "context": {
          "request": {
              "url": "http:\/\/docker.hackthebox.eu:32454\/products\/image\/5UnnF0cUnl9WwgH3bQCQjtdT0nUQZbgXvVDIehEz",
              "ip": null,
              "method": "GET",
              "useragent": "Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/86.0.4240.198 Safari\/537.36"
          },
          "request_data": {
              "queryString": [],
              "body": [],
              "files": []
          },
          "headers": {
              "cookie": ["_ga=GA1.2.1266898371.1600038960; ajs_anonymous_id=%2273ccd64f-0f60-423b-ba18-8a71204f34d3%22; ajs_user_id=%22b324baa132a02a56f37d59b0b09196c6%22; __auc=0f16469f1749ef9a8beb0d48bc4; _gid=GA1.2.43711839.1605893041; session=eyJyb2xlIjoiZ3Vlc3QifQ.X7gENQ.z_hO-vm0TItzi1uVJHBM8guLKmM; XSRF-TOKEN=eyJpdiI6Ino0NW12ZXVCcEVwZHlXdGdUR2oxQWc9PSIsInZhbHVlIjoiQVBjYkhLK3R2UVc0U0ZsVTdWR0o0NFFmQ1l6S0RwSGo1TW0rNVVvQUQyaDhrMnd2R0JOVnNkMXdSU3FLV2FtOUVLUUh6NW1ZcEpwMUJZUWh6Nm5yVlVncm4vN2tIMXYycXhEUWpxWlk0KzFrdXVCWDlyWDNBVVhNYng1Q0Fab2giLCJtYWMiOiI1Y2MxMjkwY2JhNjQyMWVjNjk1MTc3NGIzOGQ1YTFhYzgyN2E0N2U4ZDI2MzUxZjA3MTkzOWM4ZjczMmVmMTE0In0%3D; laravel_session=eyJpdiI6IjZOT2NZZkxuTEFUb1VucGduVzN4bEE9PSIsInZhbHVlIjoib2JmbFRLQytoVHJ5NGxIaHh1cCszL3UyTW44RTY2TEtpOFh0aTdXRFBvaXUxVEJXQUtrUWwvdjRMaWRVS2k3cU9UNWlNSHB6aGpSR1lVL0ZOUG03OXRwRHIrcVVzaS9jVEJDdXJOMzZiYVlILzdhbVdnSWZObW5wS0lIZFAvMjEiLCJtYWMiOiI0ODliMjkyNmI4ZDFkMjg0NTU5NzE5ZjFkODgxM2NjOGMxYjJiYmE1NjFjNWU4Y2EyYzNhMWI5MTRmMGI4ODlhIn0%3D"],
              "accept-language": ["en-US,en;q=0.9,la;q=0.8"],
              "accept-encoding": ["gzip, deflate"],
              "referer": ["http:\/\/docker.hackthebox.eu:32454\/products"],
              "accept": ["text\/html,application\/xhtml+xml,application\/xml;q=0.9,image\/avif,image\/webp,image\/apng,*\/*;q=0.8,application\/signed-exchange;v=b3;q=0.9"],
              "user-agent": ["Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/86.0.4240.198 Safari\/537.36"],
              "upgrade-insecure-requests": ["1"],
              "dnt": ["1"],
              "cache-control": ["no-cache"],
              "pragma": ["no-cache"],
              "connection": ["keep-alive"],
              "host": ["docker.hackthebox.eu:32454"],
              "content-length": [""],
              "content-type": [""]
          },
          "cookies": {
              "_ga": null,
              "ajs_anonymous_id": null,
              "ajs_user_id": null,
              "__auc": null,
              "_gid": null,
              "session": null,
              "XSRF-TOKEN": "FpOPPoPBMmSwxRErC81TeW0teoJSueSvECyKGSo5",
              "laravel_session": "WU7DcJ6bWdFBWUf0Qbucs7dk7FVq4sSJewKeg52u"
          },
          "session": {
              "_token": "FpOPPoPBMmSwxRErC81TeW0teoJSueSvECyKGSo5",
              "url": {
                  "intended": "http:\/\/docker.hackthebox.eu:32454"
              },
              "_previous": {
                  "url": "http:\/\/docker.hackthebox.eu:32454\/products"
              },
              "_flash": {
                  "old": [],
                  "new": []
              },
              "login_web_59ba36addc2b2f9401580f014c7f58ea4e30989d": 2
          },
          "route": {
              "route": null,
              "routeParameters": {
                  "filename": "5UnnF0cUnl9WwgH3bQCQjtdT0nUQZbgXvVDIehEz"
              },
              "controllerAction": "App\\Http\\Controllers\\ProductsController@getImage",
              "middleware": ["web", "auth"]
          },
          "user": {
              "id": 2,
              "username": "lxkid02",
              "email": "lxkid02@protonmail.com",
              "is_verified": false,
              "created_at": "2020-11-20T18:42:55.000000Z",
              "updated_at": "2020-11-20T18:42:55.000000Z"
          },
          "env": {
              "laravel_version": "8.10.0",
              "laravel_locale": "en",
              "laravel_config_cached": false,
              "php_version": "7.4.12"
          },
          "logs": [],
          "dumps": [],
          "queries": [{
              "sql": "select * from \u0022users\u0022 where \u0022id\u0022 = ? limit 1",
              "time": 0.31,
              "connection_name": "sqlite",
              "bindings": [2],
              "microtime": 1605901827.530073
          }]
      },
      "stage": "production",
      "message_level": null,
      "open_frame_index": null,
      "group_by": "topFrame",
      "application_path": "\/www"
  },
  "config": {
      "editor": "phpstorm",
      "remoteSitesPath": "",
      "localSitesPath": "",
      "theme": "light",
      "enableShareButton": true,
      "enableRunnableSolutions": true,
      "directorySeparator": "\/"
  },
  "solutions": [],
  "telescopeUrl": null,
  "shareEndpoint": "http:\/\/docker.hackthebox.eu:32454\/_ignition\/share-report",
  "defaultTab": "StackTab",
  "defaultTabProps": []
};